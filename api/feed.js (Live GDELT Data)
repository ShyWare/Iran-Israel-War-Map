// This file lives in the /api directory and acts as the backend serverless function.
// It fetches live data from the GDELT project, processes it, and serves it to your app.

import { kv } from '@vercel/kv';
import fetch from 'node-fetch';

// GDELT CAMEO codes for conflict events (airstrikes, bombings, etc.)
const CONFLICT_EVENT_CODES = [
    '180', '181', '182', '1821', '1822', '1823', '183', '1831', 
    '1832', '1833', '1834', '184', '185', '186', '190', '191', 
    '192', '193', '194', '195', '196', '200', '201', '202', 
    '203', '204', '2041', '2042'
];

// FIPS country codes for the region of interest
const REGION_COUNTRY_CODES = ['IR', 'IS', 'LE', 'SY', 'IZ', 'JO', 'SA', 'YE'];

/**
 * Fetches the master file list from GDELT and returns URLs for the last N files.
 * @param {number} fileCount The number of recent files to get URLs for.
 * @returns {Promise<string[]>} A list of the most recent data file URLs.
 */
async function getLatestGdeltFileURLs(fileCount = 16) { // 16 files = 4 hours of data
    const response = await fetch('http://data.gdeltproject.org/gdeltv2/masterfilelist.txt');
    const text = await response.text();
    const lines = text.trim().split('\n');
    // Get the last `fileCount` lines and extract their URLs
    const recentFileURLs = lines.slice(-fileCount).map(line => {
        const parts = line.split(' ');
        return parts[2];
    });
    return recentFileURLs;
}

/**
 * Fetches and parses a GDELT data file.
 * @param {string} fileUrl The URL of the GDELT data file to process.
 * @returns {Promise<Array<object>>} A list of processed event objects.
 */
async function processGdeltFile(fileUrl) {
    try {
        const response = await fetch(fileUrl);
        if (!response.ok) {
            console.warn(`Failed to fetch GDELT file: ${fileUrl}, status: ${response.status}`);
            return [];
        }
        const text = await response.text();
        const lines = text.trim().split('\n');
        const events = [];

        for (const line of lines) {
            const fields = line.split('\t');
            if (fields.length < 61) continue; // Skip malformed lines

            const eventCode = fields[26];
            const actionCountry = fields[53];
            const latitude = parseFloat(fields[56]);
            const longitude = parseFloat(fields[57]);

            if (
                CONFLICT_EVENT_CODES.includes(eventCode) &&
                REGION_COUNTRY_CODES.includes(actionCountry) &&
                !isNaN(latitude) && !isNaN(longitude)
            ) {
                events.push({
                    lat: latitude,
                    lon: longitude,
                    city: fields[52] || 'Unknown Location',
                    type: 'Kinetic Event',
                    severity: 'High',
                    zoneType: 'alert',
                    timestamp: fields[1].slice(0, 8) + 'T' + fields[1].slice(8, 14) + 'Z',
                    source: fields[60]
                });
            }
        }
        return events;
    } catch (error) {
        console.error(`Error processing file ${fileUrl}:`, error);
        return []; // Return empty array on error so one bad file doesn't stop everything
    }
}

// The main serverless function handler
export default async function handler(req, res) {
    const CACHE_KEY = 'live-map-data-v2';

    try {
        let cachedData = await kv.get(CACHE_KEY);
        if (cachedData) {
            console.log('Cache hit. Returning cached map data.');
            return res.status(200).json(cachedData);
        }

        console.log('Cache miss. Fetching new data from GDELT.');
        const fileURLs = await getLatestGdeltFileURLs();
        
        // Process all files in parallel for speed
        const promises = fileURLs.map(url => processGdeltFile(url));
        const results = await Promise.all(promises);
        
        // Flatten the array of arrays into a single list of events
        const allEvents = results.flat();
        
        // Remove duplicate events based on timestamp and location
        const uniqueEvents = Array.from(new Map(allEvents.map(event => [`${event.timestamp}-${event.lat}-${event.lon}`, event])).values());

        // Cache the data for 15 minutes
        if (uniqueEvents.length > 0) {
            await kv.set(CACHE_KEY, uniqueEvents, { ex: 900 });
            console.log(`New data fetched and cached. Found ${uniqueEvents.length} relevant events.`);
        } else {
            // Cache an empty array to prevent re-fetching for 5 minutes if nothing is found
            await kv.set(CACHE_KEY, [], { ex: 300 });
            console.log('No relevant events found in the last 4 hours.');
        }

        return res.status(200).json(uniqueEvents);

    } catch (error) {
        console.error('Error in live data API:', error);
        return res.status(500).json({ error: 'Failed to fetch live event data.' });
    }
}
